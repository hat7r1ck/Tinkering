// Placeholder variables
$malware_signatures = "${malware_signatures}"      // e.g., "malware.exe,malicious.dll" or leave empty
$critical_system_files = "${critical_system_files}"// e.g., "svchost.exe,lsass.exe" or leave empty

// Split malware signatures and critical system files into arrays
$malware_signature_list = split($malware_signatures, ",")
$critical_system_file_list = split($critical_system_files, ",")

// Define the malware execution filter
$malware_exec_filter = (
    (principal.process.file.name in $malware_signature_list or target.process.file.name in $malware_signature_list) or
    (principal.process.file.name in $critical_system_file_list and security_result.category == "MALWARE_EXECUTION") or
    (target.process.file.name in $critical_system_file_list and security_result.category == "MALWARE_EXECUTION")
)

// Apply the filter
$malware_exec_filter

// Extract relevant fields using CrowdStrike mappings
$user = principal.user.userid
$process = principal.process.file.full_path
$process_pid = principal.process.pid
$command_line = principal.process.command_line
$asset_id = principal.asset_id
$asset_hostname = principal.hostname
$threat_verdict = security_result.threat_verdict
$location_city = principal.location.city
$location_country = principal.location.country_or_region
$timestamp = metadata.event_timestamp.seconds

// Group by process, process PID, and date
$date = timestamp.get_date($timestamp, "Etc/UTC")
match:
    $process, $process_pid, $date

// Aggregate outcomes
outcome:
    $unique_users = array_distinct([$user])
    $command_lines = array_distinct($command_line)
    $asset_ids = array_distinct([$asset_id])
    $asset_hostnames = array_distinct([$asset_hostname])
    $threat_verdicts = array_distinct([$threat_verdict])
    $locations = array_distinct([$location_city, $location_country])
    $formatted_date = timestamp.get_date($date, "Etc/UTC")

// Order by date ascending and threat verdict descending
order:
    $date asc, $threat_verdict desc
