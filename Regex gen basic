# ------------------------ Enhanced Regex Generation Tool ------------------------

# Uncomment the following line to install required libraries if not already installed
# !pip install pandas matplotlib seaborn ipywidgets

import re
import pandas as pd
import collections
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display, Markdown, HTML, clear_output
import ipywidgets as widgets
import string
import warnings

# Suppress warnings for cleaner output
warnings.filterwarnings('ignore')

# Set Seaborn style for plots
sns.set(style="whitegrid")

# ------------------------ Helper Functions ------------------------

def escape_regex(text):
    """Escape special regex characters in a string."""
    return re.escape(text)

def substring_analysis(column_data, min_length=4, min_frequency=2, top_k=10):
    """
    Identify frequent substrings within the data.

    Parameters:
    - column_data: pd.Series containing the data to analyze.
    - min_length: Minimum length of substrings to consider.
    - min_frequency: Minimum number of occurrences for a substring to be considered.
    - top_k: Number of top substrings to return.

    Returns:
    - List of substrings ordered by frequency.
    """
    substring_counts = collections.Counter()
    for text in column_data:
        text_length = len(text)
        for length in range(min_length, text_length + 1):
            for i in range(text_length - length + 1):
                substring = text[i:i+length]
                substring_counts[substring] += 1
    # Filter substrings by minimum frequency and sort
    frequent_substrings = [(sub, count) for sub, count in substring_counts.items() if count >= min_frequency]
    frequent_substrings.sort(key=lambda x: x[1], reverse=True)
    # Remove substrings that are part of larger substrings to avoid redundancy
    unique_substrings = []
    seen = set()
    for sub, count in frequent_substrings:
        if not any(sub in existing for existing in seen):
            unique_substrings.append(sub)
            seen.add(sub)
        if len(unique_substrings) >= top_k:
            break
    return unique_substrings

def validate_data(df):
    """Validate the uploaded DataFrame."""
    if df.empty:
        display(Markdown("**Error:** The uploaded CSV file is empty."))
        return False
    if not all(df.columns):
        display(Markdown("**Error:** The uploaded CSV file has missing column headers."))
        return False
    return True

def generate_regex(rules, patterns):
    """
    Generate a regex pattern based on specified rules and patterns.
    
    Parameters:
    - rules: List of rules corresponding to each pattern (e.g., 'Exactly matches', 'Contains', etc.).
    - patterns: List of pattern strings.
    
    Returns:
    - A compiled regex pattern as a string.
    """
    regex_parts = []
    for rule, pattern in zip(rules, patterns):
        escaped_pattern = escape_regex(pattern)
        if rule == "Exactly matches":
            part = f"^{escaped_pattern}$"
        elif rule == "Contains":
            part = f".*{escaped_pattern}.*"
        elif rule == "Starts with":
            part = f"^{escaped_pattern}.*"
        elif rule == "Ends with":
            part = f".*{escaped_pattern}$"
        else:
            # Default to exact match if rule is unrecognized
            part = f"^{escaped_pattern}$"
        regex_parts.append(part)
    
    # Combine all parts using alternation
    combined_regex = "|".join(regex_parts)
    return combined_regex

def visualize_matches(pattern, data):
    """Visualize regex match distribution using a bar chart."""
    try:
        matches = data.str.contains(pattern, regex=True, case=False, na=False)
        match_counts = matches.value_counts().sort_index()
        labels = ['No Match', 'Match']
        counts = [match_counts.get(False, 0), match_counts.get(True, 0)]

        plt.figure(figsize=(6,4))
        sns.barplot(x=labels, y=counts, palette="viridis")
        plt.title('Regex Match Distribution')
        plt.xlabel('Match Result')
        plt.ylabel('Number of Entries')

        # Annotate bars with counts
        for i, count in enumerate(counts):
            plt.text(i, count + max(counts)*0.01, str(count), ha='center')

        plt.tight_layout()
        plt.show()
    except re.error as e:
        display(Markdown(f"**Error compiling regex for visualization:** {e}"))

def create_copy_button(regex):
    """Create a copy button and textarea for the regex."""
    regex_textarea = widgets.Textarea(
        value=regex,
        description='Regex:',
        disabled=True,
        layout=widgets.Layout(width='100%', height='100px')
    )
    copy_button = widgets.Button(
        description="Copy Regex",
        button_style='success',
        tooltip='Copy the generated regex to clipboard',
        icon='clipboard',
        layout=widgets.Layout(width='150px', margin='10px 0px 0px 0px')
    )

    def on_copy_clicked(b):
        """Handle the copy button click event."""
        # Escape backslashes and quotes in regex to prevent JS errors
        safe_regex = regex.replace('\\', '\\\\').replace('"', '\\"').replace("'", "\\'")
        js_code = f"""
        <script>
        navigator.clipboard.writeText("{safe_regex}").then(function() {{
            alert('Regex copied to clipboard!');
        }}, function(err) {{
            alert('Could not copy text: ' + err);
        }});
        </script>
        """
        display(HTML(js_code))

    copy_button.on_click(on_copy_clicked)
    return widgets.VBox([regex_textarea, copy_button])

def create_test_interface(pattern):
    """Create a testing interface for the generated regex."""
    test_input = widgets.Textarea(
        value='',
        placeholder='Enter test strings separated by commas',
        description='Test Inputs:',
        disabled=False,
        layout=widgets.Layout(width='100%', height='100px')
    )

    test_button = widgets.Button(
        description="Run Tests",
        button_style='info',
        tooltip='Test the regex against the inputs',
        icon='check',
        layout=widgets.Layout(width='150px', margin='10px 0px 0px 0px')
    )

    test_output = widgets.Output()

    def on_test_clicked(b):
        """Handle the test button click event."""
        with test_output:
            clear_output()
            test_strings = [s.strip() for s in test_input.value.split(',') if s.strip()]
            if not test_strings:
                print("**No test strings provided.**")
                return
            try:
                compiled_regex = re.compile(pattern, re.IGNORECASE)
                for s in test_strings:
                    match = compiled_regex.search(s)
                    print(f"Input: '{s}' --> Match: {'Yes' if match else 'No'}")
            except re.error as e:
                print(f"**Error compiling regex:** {e}")

    test_button.on_click(on_test_clicked)
    return widgets.VBox([test_input, test_button, test_output])

def generate_regex_history(history_patterns):
    """Generate a Markdown formatted list of regex patterns."""
    if not history_patterns:
        return "**No patterns generated yet.**"
    md = "### **Pattern History:**\n"
    for idx, pat in enumerate(history_patterns, 1):
        md += f"{idx}. `{pat}`\n"
    return md

# ------------------------ Regex Generation Process ------------------------

def regex_generation_tool():
    """Initialize and run the Regex Generation Tool."""
    
    # Initialize pattern history
    pattern_history = []
    
    # Create widgets for user input
    csv_path_input = widgets.Text(
        value='',
        placeholder='Enter CSV file path',
        description='CSV File:',
        disabled=False,
        layout=widgets.Layout(width='100%')
    )
    
    load_button = widgets.Button(
        description="Load CSV",
        button_style='primary',
        tooltip='Click to load the specified CSV file',
        icon='download',
        layout=widgets.Layout(width='150px', margin='0px 0px 10px 0px')
    )
    
    column_dropdown = widgets.Dropdown(
        options=[],
        description="Select Column:",
        style={'description_width': 'initial'},
        layout=widgets.Layout(width='100%'),
        disabled=True
    )
    
    run_button = widgets.Button(
        description="Generate Regex",
        button_style='success',
        tooltip='Click to generate the regex based on the selected column.',
        icon='play',
        layout=widgets.Layout(width='150px', margin='20px 0px 10px 0px'),
        disabled=True
    )
    
    # Results and History Outputs
    results_output = widgets.Output(layout={'border': '1px solid black'})
    history_output = widgets.Output(layout={'border': '1px solid black'})
    
    # Define button click events
    def on_load_clicked(b):
        with results_output:
            clear_output()
            csv_path = csv_path_input.value.strip()
            if not csv_path:
                display(Markdown("**Error:** Please enter the CSV file path."))
                return
            try:
                data = pd.read_csv(csv_path)
                if not validate_data(data):
                    return
                display(Markdown("**CSV File Loaded Successfully!**"))
                column_dropdown.options = list(data.columns)
                column_dropdown.disabled = False
                run_button.disabled = False
                regex_generation_tool.loaded_data = data
            except FileNotFoundError:
                display(Markdown("**Error:** The file was not found. Please check the file path."))
            except pd.errors.ParserError:
                display(Markdown("**Error:** The file could not be parsed. Please ensure it is a valid CSV file."))
            except Exception as e:
                display(Markdown(f"**An unexpected error occurred:** {e}"))
    
    load_button.on_click(on_load_clicked)
    
    def on_run_clicked(b):
        with results_output:
            clear_output()
            display(Markdown("**Step 1:** Analyzing data and identifying patterns..."))
        
        selected_column = column_dropdown.value
        if not selected_column:
            with results_output:
                display(Markdown("**Error:** Please select a column to analyze."))
            return
        
        data_series = regex_generation_tool.loaded_data[selected_column].dropna().astype(str)
        if data_series.empty:
            with results_output:
                display(Markdown("**Error:** The selected column has no data to analyze."))
            return
        
        # Perform substring analysis to identify top patterns
        substrings = substring_analysis(data_series, min_length=4, min_frequency=2, top_k=10)
        if not substrings:
            with results_output:
                display(Markdown("**Error:** No frequent substrings found to generate regex."))
            return
        
        # Display patterns and allow user to define rules
        with results_output:
            display(Markdown("**Step 2:** Define matching rules for each identified pattern."))
        
        # Create a dynamic list of dropdowns for each pattern
        rule_options = ['Exactly matches', 'Contains', 'Starts with', 'Ends with']
        pattern_rules = []
        for pat in substrings:
            rule = widgets.Dropdown(
                options=rule_options,
                value='Contains',
                description=pat,
                style={'description_width': 'initial'},
                layout=widgets.Layout(width='50%')
            )
            pattern_rules.append(rule)
        
        # Display all pattern rule selectors
        rules_box = widgets.VBox(pattern_rules, layout=widgets.Layout(max_height='300px', overflow='auto'))
        display(rules_box)
        
        # Button to confirm rules and generate regex
        confirm_button = widgets.Button(
            description="Confirm and Generate Regex",
            button_style='success',
            tooltip='Click to generate the regex based on defined rules.',
            icon='check',
            layout=widgets.Layout(width='200px', margin='10px 0px 10px 0px')
        )
        
        confirm_output = widgets.Output()
        
        def on_confirm_clicked(b):
            with confirm_output:
                clear_output()
                user_rules = [rule.value for rule in pattern_rules]
                user_patterns = [rule.description for rule in pattern_rules]
                
                # Generate regex based on user-defined rules and patterns
                regex_pattern = generate_regex(user_rules, user_patterns)
                
                if not regex_pattern:
                    display(Markdown("**Error:** Unable to generate a meaningful regex pattern from the provided rules and patterns."))
                    return
                
                # Evaluate coverage
                try:
                    matches = data_series.str.contains(regex_pattern, regex=True, case=False, na=False)
                    coverage = matches.sum() / len(data_series)
                except re.error as e:
                    display(Markdown(f"**Error compiling regex:** {e}"))
                    return
                
                # Display results
                display(Markdown(f"### **Generated Regex Pattern:** `{regex_pattern}`"))
                display(Markdown(f"### **Coverage:** {coverage:.4f}"))
                visualize_matches(regex_pattern, data_series)
                # Display copy button and test interface
                copy_btn = create_copy_button(regex_pattern)
                test_interface = create_test_interface(regex_pattern)
                display(copy_btn, test_interface)
                
                # Update pattern history
                pattern_history.append(regex_pattern)
                with history_output:
                    clear_output()
                    display(Markdown(generate_regex_history(pattern_history)))
        
        confirm_button.on_click(on_confirm_clicked)
        display(confirm_button, confirm_output)
    
    run_button.on_click(on_run_clicked)
    
    # Arrange widgets in layout
    input_widgets = widgets.VBox([
        widgets.HTML("<b>Step 1:</b> Enter the path to your CSV file below and click 'Load CSV'."),
        csv_path_input,
        load_button,
        widgets.HTML("<b>Step 2:</b> After loading, select the column you want to analyze."),
        column_dropdown,
        widgets.HTML("<b>Step 3:</b> Click 'Generate Regex' to identify patterns and define rules."),
        run_button
    ], layout=widgets.Layout(width='100%', padding='10px 20px 10px 20px'))
    
    # Combine input and output areas with separators
    ui = widgets.VBox([
        input_widgets,
        widgets.HTML("<hr>"),
        results_output,
        widgets.HTML("<hr>"),
        history_output
    ], layout=widgets.Layout(width='100%', padding='10px'))
    
    # Display the UI
    display(ui)

# ------------------------ Initialize and Run Tool ------------------------

# Create a container to hold loaded data
regex_generation_tool.loaded_data = None

# Run the tool
regex_generation_tool()
